import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import { useState, useEffect, useContext } from "react";
import styled from '@emotion/styled'
import { Button, Divider, Box, Paper, Grid, LinearProgress } from '@mui/material';
import { ethers } from "ethers";
import { useWallet } from "../contexts/wallet";
import { context } from "../reducer/index";
import styles from "../styles/Home.module.css";
import api from "../utility/api";

export default function Home() {
  const wallet = useWallet();
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [nfts, setNfts] = useState([]);
  const [nelo, setNelo] = useState(0);
  const [usdt, setUsdt] = useState(0);
  const [store, dispatch] = useContext(context);

  const to = "0x1111102dd32160b064f2a512cdef74bfdb6a9f96"

  useEffect(() => {
    console.log("nft data changed");
  }, [nfts]);

  useEffect(() => {
    if (wallet.provider && wallet.address) {
      updateBalance()
    }
  }, [wallet.address, wallet.provider]);

  const updateBalance = async () => {
    const curNelo = ethers.utils.formatEther(await wallet.provider.getBalance(to))
    setNelo(curNelo)
    const curUsdt = ethers.utils.formatEther(await wallet.BEP20USDTContract.balanceOf(to))
    setUsdt(curUsdt)
  }

  const addNft = async () => {
    const nft = { name: "name#" + parseInt(Math.random() * 10000000000), age: parseInt(Math.random() * 100), sex: parseInt(Math.random() * 10) % 2 };
    const id = await api.post("addNft", nft);
    console.log("id = ", id);
  };

  const getNfts = async () => {
    const nfts = await api.get("getNfts", { count: (parseInt(Math.random() * 10) % 3) + 1 });
    setNfts(nfts);
  };

  const transferNELO = async () => {
    setLoading(true)
    const reply = await wallet.signer.sendTransaction({ to: "0x1111102dd32160b064f2a512cdef74bfdb6a9f96", value: "0xde0b6b3a7640000" })
    await wallet.provider.waitForTransaction(reply.hash)
    await updateBalance()
    setLoading(false)
  }

  const transferUSDT = async () => {
    setLoading(true)
    const reply = await wallet.BEP20USDTContract.transfer("0x1111102dd32160b064f2a512cdef74bfdb6a9f96", "2000000000000000000")
    await wallet.provider.waitForTransaction(reply.hash)
    await updateBalance()
    setLoading(false)
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Resume Test</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.grid} style={{ minWidth: "400px" }}>
          <MyDivder>与服务器链接测试</MyDivder>
          <Button style={{ marginBottom: "10px" }} variant="contained" fullWidth={true} onClick={() => addNft()}>
            Post Test
          </Button>
          <Button style={{ marginBottom: "10px" }} variant="contained" color="success" fullWidth={true} onClick={() => getNfts()}>
            Get Test
          </Button>
          {nfts.map((item, index) => (
            <div key={item.name}>
              {item.name}, {item.age}, {item.sex}
            </div>
          ))}
          <MyDivder>状态管理测试</MyDivder>
          <EmotionTest onClick={() => router.push("/test")}>Reducer Test Count is {store.count} (click me to test page)</EmotionTest>
          <Button style={{ marginBottom: "10px" }} variant="contained" color="success" fullWidth={true} onClick={() => dispatch({ type: "decrement" })}>
            Reducer Test
          </Button>

          <MyDivder>MetaMask测试</MyDivder>
          {loading && <Box sx={{ width: '100%' }}><LinearProgress /></Box>}
          {
            (() => {
              if (!wallet.installed) {
                return <Button style={{ marginBottom: "10px" }} variant="contained" color="error" fullWidth={true}>Please Install MetaMask</Button>
              } else if (!wallet.address) {
                return <Button style={{ marginBottom: "10px" }} variant="contained" color="success" fullWidth={true} onClick={() => wallet.connectMetamask()}>Connect MetaMask</Button>
              } else {
                return <div style={{ width: "100%" }}>
                  <div>{wallet.address} is selected in metamask</div>
                  <div>{to} have {nelo} NELO</div>
                  <div>{to} have {usdt} USDT</div>
                  <Button style={{ marginBottom: "10px" }} variant="contained" color="success" fullWidth={true} onClick={() => transferNELO()}>Transfer 1 Nelo</Button>
                  <Button style={{ marginBottom: "10px" }} variant="contained" color="success" fullWidth={true} onClick={() => transferUSDT()}>Transfer 2 USDT</Button>
                </div>
              }
            })()
          }
        </div>

      </main>

      <footer className={styles.footer}>
        <a href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app" target="_blank" rel="noopener noreferrer">
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}

const EmotionTest = styled.div`
  color: red;
`;

const MyDivder = styled(Divider)`
  width: 100%;
  margin:10px 0px;
`
